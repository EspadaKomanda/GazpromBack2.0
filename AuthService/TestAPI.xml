<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BackGazprom</name>
    </assembly>
    <members>
        <member name="M:AuthService.Services.Jwt.JwtService.GenerateAccessToken(AuthService.Database.Models.User)">
            <summary>
            Generates an access token for the specified user.
            </summary>
            <param name="user">The user for whom the access token is generated.</param>
            <returns>The generated access token as a string.</returns>
        </member>
        <member name="M:AuthService.Services.Jwt.JwtService.GenerateRefreshToken(AuthService.Database.Models.User)">
            <summary>
            Generates a refresh token for the specified user.
            </summary>
            <param name="user">The user for whom the refresh token is generated.</param>
            <returns>The generated refresh token as a string.</returns>
        </member>
        <member name="M:AuthService.Services.Jwt.JwtService.ValidateAccessToken(System.String)">
            <summary>
            Validates the access token and extracts the username from it if valid.
            Returns a tuple indicating whether the token is valid and the extracted username.
            </summary>
            <param name="token">The access token to validate.</param>
            <returns>A tuple indicating whether the token is valid and the extracted username.</returns>
        </member>
        <member name="M:AuthService.Services.Jwt.JwtService.ValidateRefreshToken(System.String)">
            <summary>
            Validates the refresh token and extracts the username from it if valid.
            Returns a tuple indicating whether the token is valid and the extracted username.
            </summary>
            <param name="token">The refresh token to validate.</param>
            <returns>A tuple indicating whether the token is valid and the extracted username.</returns>
        </member>
        <member name="M:KafkaTestLib.Kafka.KafkaTopicManager.CheckTopicExists(System.String)">
            <summary>
            Checks if a Kafka topic with the specified name exists.
            </summary>
            <param name="topicName">The name of the topic to check.</param>
            <returns>True if the topic exists, false otherwise.</returns>
            <exception cref="T:KafkaTestLib.KafkaException.CheckTopicException">Thrown if the topic check fails.</exception>
        </member>
        <member name="M:KafkaTestLib.Kafka.KafkaTopicManager.CreateTopic(System.String,System.Int32,System.Int16)">
            <summary>
            Creates a new Kafka topic with the specified name, number of partitions, and replication factor.
            </summary>
            <param name="topicName">The name of the topic to create.</param>
            <param name="numPartitions">The number of partitions for the topic.</param>
            <param name="replicationFactor">The replication factor for the topic.</param>
            <returns>True if the topic was successfully created, false otherwise.</returns>
            <exception cref="T:KafkaTestLib.KafkaException.CreateTopicException">Thrown if the topic creation fails.</exception>
        </member>
    </members>
</doc>
